/**
 * Security Process Micro Service
 * This service is the security supplier
 *
 * The version of the OpenAPI document: {{version}}
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.pdnd.interop.uservice.authorizationprocess.client.api

import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.Client
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.ClientKey
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.ClientKeys
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.ClientSeed
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.EncodedClientKey
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.KeySeed
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.Operator
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.OperatorSeed
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.Problem
import java.util.UUID
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.invoker._
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.invoker.CollectionFormats._
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.invoker.ApiKeyLocations._

object ClientApi {

  def apply(baseUrl: String = "http://localhost/pdnd-interop-uservice-authorization-process/}") = new ClientApi(baseUrl)
}

class ClientApi(baseUrl: String) {
  
  /**
   * Activate the given client
   * 
   * Expected answers:
   *   code 204 :  (the client has been activated.)
   *   code 400 : Problem (Bad Request)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Client not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of the client holding the key
   */
  def activateClientById(clientId: UUID)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/clients/{clientId}/activate", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Adds an Operator to a Client
   * 
   * Expected answers:
   *   code 201 : Client (Operator added)
   *   code 400 : Problem (Bad Request)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Missing Required Information)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId The Client id
   * @param operatorSeed An Operator seed
   */
  def addOperator(clientId: UUID, operatorSeed: OperatorSeed)(implicit bearerToken: BearerToken): ApiRequest[Client] =
    ApiRequest[Client](ApiMethods.POST, baseUrl, "/clients/{clientId}/operators", "application/json")
      .withCredentials(bearerToken).withBody(operatorSeed)
      .withPathParam("clientId", clientId)
      .withSuccessResponse[Client](201)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Create a new client
   * 
   * Expected answers:
   *   code 201 : Client (Client created)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Not Found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientSeed 
   */
  def createClient(clientSeed: ClientSeed)(implicit bearerToken: BearerToken): ApiRequest[Client] =
    ApiRequest[Client](ApiMethods.POST, baseUrl, "/clients", "application/json")
      .withCredentials(bearerToken).withBody(clientSeed)
      .withSuccessResponse[Client](201)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Creates one or more keys for the corresponding client.
   * 
   * Expected answers:
   *   code 201 : ClientKeys (Keys created)
   *   code 400 : Problem (Bad Request)
   *   code 401 : Problem (Unauthorized)
   *   code 403 : Problem (Forbidden)
   *   code 404 : Problem (Client id not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of client that the added keys MUST belong to
   * @param keySeed an array of base64 encoded PEM keys.
   */
  def createKeys(clientId: UUID, keySeed: Seq[KeySeed])(implicit bearerToken: BearerToken): ApiRequest[ClientKeys] =
    ApiRequest[ClientKeys](ApiMethods.POST, baseUrl, "/clients/{clientId}/keys", "application/json")
      .withCredentials(bearerToken).withBody(keySeed)
      .withPathParam("clientId", clientId)
      .withSuccessResponse[ClientKeys](201)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](403)
      .withErrorResponse[Problem](404)
      

  /**
   * Deletes a Client
   * 
   * Expected answers:
   *   code 204 :  (Client deleted)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Client not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId The Client id
   */
  def deleteClient(clientId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/clients/{clientId}", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given a client and key identifiers it deletes the corresponding key, if any
   * 
   * Expected answers:
   *   code 204 :  (the corresponding key has been deleted.)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Key not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of the client holding the key
   * @param keyId the unique identifier of the key (kid) to delete
   */
  def deleteClientKeyById(clientId: UUID, keyId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/clients/{clientId}/keys/{keyId}", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withPathParam("keyId", keyId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given a client and an enabled key identifier it disables the corresponding key, if any
   * 
   * Expected answers:
   *   code 204 :  (the corresponding key has been disabled.)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Key not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of the client holding the key
   * @param keyId the unique identifier of the key (kid) to disable
   */
  def disableKeyById(clientId: UUID, keyId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PATCH, baseUrl, "/clients/{clientId}/keys/{keyId}/disable", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withPathParam("keyId", keyId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given a client and a disabled key identifier it enables the corresponding key, if any
   * 
   * Expected answers:
   *   code 204 :  (the corresponding key has been enabled.)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Key not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of the client holding the key
   * @param keyId the unique identifier of the key (kid) to enable
   */
  def enableKeyById(clientId: UUID, keyId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PATCH, baseUrl, "/clients/{clientId}/keys/{keyId}/enable", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withPathParam("keyId", keyId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Retrieves a Client
   * 
   * Expected answers:
   *   code 200 : Client (Client retrieved)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Client not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId The Client id
   */
  def getClient(clientId: String)(implicit bearerToken: BearerToken): ApiRequest[Client] =
    ApiRequest[Client](ApiMethods.GET, baseUrl, "/clients/{clientId}", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withSuccessResponse[Client](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given a client and key identifiers it returns the corresponding key, if any
   * 
   * Expected answers:
   *   code 200 : ClientKey (returns the corresponding key)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Key not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of the client to look up
   * @param keyId the unique identifier of the key (kid) to lookup
   */
  def getClientKeyById(clientId: UUID, keyId: String)(implicit bearerToken: BearerToken): ApiRequest[ClientKey] =
    ApiRequest[ClientKey](ApiMethods.GET, baseUrl, "/clients/{clientId}/keys/{keyId}", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withPathParam("keyId", keyId)
      .withSuccessResponse[ClientKey](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given a client identifier it returns its corresponding set of keys, if any
   * 
   * Expected answers:
   *   code 200 : ClientKeys (returns the corresponding array of keys)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Client id not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of the client to look up
   */
  def getClientKeys(clientId: UUID)(implicit bearerToken: BearerToken): ApiRequest[ClientKeys] =
    ApiRequest[ClientKeys](ApiMethods.GET, baseUrl, "/clients/{clientId}/keys", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withSuccessResponse[ClientKeys](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Retrieves a Client Operator
   * 
   * Expected answers:
   *   code 200 : Operator (Client Operator retrieved)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Client or Operator not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId The Client id
   * @param operatorId The Operator ID
   */
  def getClientOperatorById(clientId: UUID, operatorId: UUID)(implicit bearerToken: BearerToken): ApiRequest[Operator] =
    ApiRequest[Operator](ApiMethods.GET, baseUrl, "/clients/{clientId}/operators/{operatorId}", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withPathParam("operatorId", operatorId)
      .withSuccessResponse[Operator](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * List client operators
   * 
   * Expected answers:
   *   code 200 : Seq[Operator] (Request succeed)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Not Found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of Client the operators belong to
   */
  def getClientOperators(clientId: UUID)(implicit bearerToken: BearerToken): ApiRequest[Seq[Operator]] =
    ApiRequest[Seq[Operator]](ApiMethods.GET, baseUrl, "/clients/{clientId}/operators", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withSuccessResponse[Seq[Operator]](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given a client and key identifiers it returns the corresponding encoded key, if any
   * 
   * Expected answers:
   *   code 200 : EncodedClientKey (returns the corresponding base 64 encoded key)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Key not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of the client to look up
   * @param keyId the unique identifier of the key (kid) to lookup
   */
  def getEncodedClientKeyById(clientId: UUID, keyId: String)(implicit bearerToken: BearerToken): ApiRequest[EncodedClientKey] =
    ApiRequest[EncodedClientKey](ApiMethods.GET, baseUrl, "/clients/{clientId}/encoded/keys/{keyId}", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withPathParam("keyId", keyId)
      .withSuccessResponse[EncodedClientKey](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * List clients
   * 
   * Expected answers:
   *   code 200 : Seq[Client] (Request succeed)
   *   code 400 : Problem (Bad Request)
   *   code 401 : Problem (Unauthorized)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param offset Pagination offset
   * @param limit Pagination limit
   * @param eServiceId ID of E-Service that MUST be related to the Client
   * @param operatorId ID of operator that MUST be related to the Client
   * @param consumerId ID of Consumer that MUST be related to the Client
   */
  def listClients(offset: Option[Int] = None, limit: Option[Int] = None, eServiceId: Option[UUID] = None, operatorId: Option[UUID] = None, consumerId: Option[UUID] = None)(implicit bearerToken: BearerToken): ApiRequest[Seq[Client]] =
    ApiRequest[Seq[Client]](ApiMethods.GET, baseUrl, "/clients", "application/json")
      .withCredentials(bearerToken).withQueryParam("offset", offset)
      .withQueryParam("limit", limit)
      .withQueryParam("eServiceId", eServiceId)
      .withQueryParam("operatorId", operatorId)
      .withQueryParam("consumerId", consumerId)
      .withSuccessResponse[Seq[Client]](200)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](401)
      

  /**
   * Removes an operator from a Client
   * 
   * Expected answers:
   *   code 204 :  (Operator removed)
   *   code 400 : Problem (Bad Request)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Client or operator not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId The Client id
   * @param operatorId The Operator ID
   */
  def removeClientOperator(clientId: UUID, operatorId: UUID)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/clients/{clientId}/operators/{operatorId}", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withPathParam("operatorId", operatorId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Suspend the given client
   * 
   * Expected answers:
   *   code 204 :  (the corresponding client has been suspended.)
   *   code 400 : Problem (Bad Request)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Client not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of the client
   */
  def suspendClientById(clientId: UUID)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, baseUrl, "/clients/{clientId}/suspend", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      



}

