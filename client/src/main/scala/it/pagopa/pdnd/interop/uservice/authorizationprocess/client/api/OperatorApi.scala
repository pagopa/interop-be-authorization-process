/**
 * Security Process Micro Service
 * This service is the security supplier
 *
 * The version of the OpenAPI document: {{version}}
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.pdnd.interop.uservice.authorizationprocess.client.api

import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.ClientKey
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.ClientKeys
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.OperatorKeySeed
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.Problem
import java.util.UUID
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.invoker._
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.invoker.CollectionFormats._
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.invoker.ApiKeyLocations._

object OperatorApi {

  def apply(baseUrl: String = "http://localhost/pdnd-interop-uservice-authorization-process/}") = new OperatorApi(baseUrl)
}

class OperatorApi(baseUrl: String) {
  
  /**
   * Creates one or more keys for the corresponding operator.
   * 
   * Expected answers:
   *   code 201 : ClientKeys (Keys created)
   *   code 400 : Problem (Bad Request)
   *   code 401 : Problem (Unauthorized)
   *   code 403 : Problem (Forbidden)
   *   code 404 : Problem (Client id not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param operatorId ID of the Opeartor that the added keys MUST belong to
   * @param operatorKeySeed an array of base64 encoded PEM keys.
   */
  def createOperatorKeys(operatorId: UUID, operatorKeySeed: Seq[OperatorKeySeed])(implicit bearerToken: BearerToken): ApiRequest[ClientKeys] =
    ApiRequest[ClientKeys](ApiMethods.POST, baseUrl, "/operators/{operatorId}/keys", "application/json")
      .withCredentials(bearerToken).withBody(operatorKeySeed)
      .withPathParam("operatorId", operatorId)
      .withSuccessResponse[ClientKeys](201)
      .withErrorResponse[Problem](400)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](403)
      .withErrorResponse[Problem](404)
      

  /**
   * Given an operator and key identifiers it deletes the corresponding key, if any
   * 
   * Expected answers:
   *   code 204 :  (the corresponding key has been deleted.)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Key not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param operatorId Operator ID owning the key
   * @param keyId the unique identifier of the key (kid) to delete
   */
  def deleteOperatorKeyById(operatorId: String, keyId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/operators/{operatorId}/keys/{keyId}", "application/json")
      .withCredentials(bearerToken).withPathParam("operatorId", operatorId)
      .withPathParam("keyId", keyId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given an operator and an enabled key identifier it disables the corresponding key, if any
   * 
   * Expected answers:
   *   code 204 :  (the corresponding key has been disabled.)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Key not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param operatorId Opeartor ID owning the key
   * @param keyId the unique identifier of the key (kid) to disable
   */
  def disableOperatorKeyById(operatorId: UUID, keyId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PATCH, baseUrl, "/operators/{operatorId}/keys/{keyId}/disable", "application/json")
      .withCredentials(bearerToken).withPathParam("operatorId", operatorId)
      .withPathParam("keyId", keyId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given an operator and a disabled key identifier it enables the corresponding key, if any
   * 
   * Expected answers:
   *   code 204 :  (the corresponding key has been enabled.)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Key not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param operatorId Operator ID owning the key
   * @param keyId the unique identifier of the key (kid) to enable
   */
  def enableOperatorKeyById(operatorId: UUID, keyId: String)(implicit bearerToken: BearerToken): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PATCH, baseUrl, "/operators/{operatorId}/keys/{keyId}/enable", "application/json")
      .withCredentials(bearerToken).withPathParam("operatorId", operatorId)
      .withPathParam("keyId", keyId)
      .withSuccessResponse[Unit](204)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given an operator and a client it returns its corresponding set of keys, if any
   * 
   * Expected answers:
   *   code 200 : ClientKeys (returns the corresponding array of keys)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Client id not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param clientId ID of the client holding the key
   * @param operatorId ID of the Opeartor that the added keys MUST belong to
   */
  def getClientOperatorKeys(clientId: UUID, operatorId: UUID)(implicit bearerToken: BearerToken): ApiRequest[ClientKeys] =
    ApiRequest[ClientKeys](ApiMethods.GET, baseUrl, "/clients/{clientId}/operators/{operatorId}/keys", "application/json")
      .withCredentials(bearerToken).withPathParam("clientId", clientId)
      .withPathParam("operatorId", operatorId)
      .withSuccessResponse[ClientKeys](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given an operator and key identifiers it returns the corresponding key, if any
   * 
   * Expected answers:
   *   code 200 : ClientKey (returns the corresponding key)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Key not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param operatorId Operator ID owning the key
   * @param keyId the unique identifier of the key (kid) to delete
   */
  def getOperatorKeyById(operatorId: String, keyId: String)(implicit bearerToken: BearerToken): ApiRequest[ClientKey] =
    ApiRequest[ClientKey](ApiMethods.GET, baseUrl, "/operators/{operatorId}/keys/{keyId}", "application/json")
      .withCredentials(bearerToken).withPathParam("operatorId", operatorId)
      .withPathParam("keyId", keyId)
      .withSuccessResponse[ClientKey](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      

  /**
   * Given an operator ID it returns its corresponding set of keys, if any
   * 
   * Expected answers:
   *   code 200 : ClientKeys (returns the corresponding array of keys)
   *   code 401 : Problem (Unauthorized)
   *   code 404 : Problem (Client id not found)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   * 
   * @param operatorId ID of the Opeartor that the added keys MUST belong to
   */
  def getOperatorKeys(operatorId: UUID)(implicit bearerToken: BearerToken): ApiRequest[ClientKeys] =
    ApiRequest[ClientKeys](ApiMethods.GET, baseUrl, "/operators/{operatorId}/keys", "application/json")
      .withCredentials(bearerToken).withPathParam("operatorId", operatorId)
      .withSuccessResponse[ClientKeys](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](404)
      



}

