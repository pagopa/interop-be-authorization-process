/**
 * Security Process Micro Service
 * This service is the security supplier
 *
 * The version of the OpenAPI document: {{version}}
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package it.pagopa.pdnd.interop.uservice.authorizationprocess.client.api

import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.ClientCredentialsResponse
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.Problem
import java.util.UUID
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.model.ValidJWT
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.invoker._
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.invoker.CollectionFormats._
import it.pagopa.pdnd.interop.uservice.authorizationprocess.client.invoker.ApiKeyLocations._

object AuthApi {

  def apply(baseUrl: String = "http://localhost/pdnd-interop-uservice-authorization-process/}") = new AuthApi(baseUrl)
}

class AuthApi(baseUrl: String) {
  
  /**
   * Return ok
   * 
   * Expected answers:
   *   code 200 : ClientCredentialsResponse (an Access token)
   *              Headers :
   *                Cache-Control - no-cache, no-store
   *   code 401 : Problem (Unauthorized)
   *   code 400 : Problem (Bad request)
   * 
   * @param clientAssertion 
   * @param clientAssertionType 
   * @param grantType 
   * @param clientId 
   */
  def createToken(clientAssertion: String, clientAssertionType: String, grantType: String, clientId: Option[UUID] = None): ApiRequest[ClientCredentialsResponse] =
    ApiRequest[ClientCredentialsResponse](ApiMethods.POST, baseUrl, "/as/token.oauth2", "application/x-www-form-urlencoded")
      .withFormParam("client_id", clientId)
      .withFormParam("client_assertion", clientAssertion)
      .withFormParam("client_assertion_type", clientAssertionType)
      .withFormParam("grant_type", grantType)
      .withSuccessResponse[ClientCredentialsResponse](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](400)
      
  object CreateTokenHeaders {
    def Cache_Control(r: ApiReturnWithHeaders) = r.getStringHeader("Cache-Control")
  }

  /**
   * Validates the access token passed as Authorization header
   * 
   * Expected answers:
   *   code 200 : ValidJWT (Client created)
   *   code 401 : Problem (Unauthorized)
   *   code 400 : Problem (Bad request)
   * 
   * Available security schemes:
   *   bearerAuth (http)
   */
  def validateToken()(implicit bearerToken: BearerToken): ApiRequest[ValidJWT] =
    ApiRequest[ValidJWT](ApiMethods.POST, baseUrl, "/as/token/validate", "application/json")
      .withCredentials(bearerToken).withSuccessResponse[ValidJWT](200)
      .withErrorResponse[Problem](401)
      .withErrorResponse[Problem](400)
      



}

