openapi: 3.0.3

info:
  title: Security Process Micro Service
  description: This service is the security supplier
  version: '{{version}}'
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  termsOfService: 'http://swagger.io/terms/'
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: '/pdnd-interop-uservice-authorization-process/{{version}}'
    description: This service is the security supplier
security:
  - bearerAuth: [ ]
tags:
  - name: auth
    description: Get security information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: client
    description: Get security information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: operator
    description: Get security information
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: well-known
    description: Get security information
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /as/token.oauth2:
    post:
      security: []
      tags:
        - auth
      summary: Create a new access token
      description: Return ok
      operationId: createToken
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AccessTokenRequest'
      responses:
        "200":
          description: |-
            an Access token
          headers:
            Cache-Control:
              schema:
                type: string
                default: no-cache, no-store
              description: |-
                no-cache, no-store
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCredentialsResponse'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /as/token/validate:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - auth
      summary: JWT validation
      description: Validates the access token passed as Authorization header
      operationId: validateToken
      responses:
        "200":
          description: Client created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidJWT'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /clients:
    post:
      tags:
        - client
      summary: Create a new client
      description: Create a new client
      operationId: createClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientSeed'
      responses:
        "201":
          description: Client created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    get:
      tags:
        - client
      summary: List clients
      description: List clients
      operationId: listClients
      parameters:
        - name: offset
          in: query
          description: Pagination offset
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Pagination limit
          schema:
            type: integer
            format: int32
        - name: eServiceId
          in: query
          description: ID of E-Service that MUST be related to the Client
          schema:
            type: string
            format: uuid
        - name: operatorId
          in: query
          description: ID of operator that MUST be related to the Client
          schema:
            type: string
            format: uuid
        - name: consumerId
          in: query
          description: ID of Consumer that MUST be related to the Client
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Request succeed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /clients/{clientId}:
    get:
      description: Retrieves a Client
      tags:
        - client
      summary: Get a Client
      operationId: getClient
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Client retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      description: Deletes a Client
      tags:
        - client
      summary: Delete a Client
      operationId: deleteClient
      parameters:
        - name: clientId
          in: path
          description: The Client id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Client deleted
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/clients/{clientId}/activate':
    post:
      tags:
        - client
      summary: Activates a client by id.
      description: 'Activate the given client'
      operationId: activateClientById
      parameters:
        - name: clientId
          in: path
          description: ID of the client holding the key
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: the client has been activated.
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/clients/{clientId}/suspend':
    post:
      tags:
        - client
      summary: Suspend a client by id.
      description: 'Suspend the given client'
      operationId: suspendClientById
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: the corresponding client has been suspended.
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/clients/{clientId}/operators':
    get:
      tags:
        - client
      summary: List client operators
      description: List client operators
      operationId: getClientOperators
      parameters:
        - name: clientId
          in: path
          description: ID of Client the operators belong to
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Request succeed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operators'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/clients/{clientId}/relationships/{relationshipId}':
    parameters:
      - name: clientId
        in: path
        description: The Client id
        required: true
        schema:
          type: string
          format: uuid
      - name: relationshipId
        in: path
        description: The identifier of the relationship between the security operator and the consumer
        required: true
        schema:
          type: string
          format: uuid
    get:
      description: Retrieves a Client Operator relationship
      tags:
        - client
      summary: Get a Client Operator Relationship
      operationId: getClientOperatorRelationshipById
      responses:
        "200":
          description: Client Operator relationship retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client or Operator not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      description: Removes an operator relationship from a Client
      tags:
        - client
      summary: Remove an operator relationship from a Client
      operationId: removeClientOperatorRelationship
      responses:
        "204":
          description: Operator relationship removed
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client or operator not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - client
      summary: Binds an Operator relationship to a Client
      operationId: clientOperatorRelationshipBinding
      responses:
        "201":
          description: Operator added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Missing Required Information
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      description: Binds a security operator belonging to a consumer to a Client
  '/clients/{clientId}/keys':
    post:
      tags:
        - client
      summary: Create Keys for the specific clientId.
      operationId: createKeys
      responses:
        "201":
          description: Keys created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientKeys'
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        description: an array of base64 encoded PEM keys.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeysSeed'
      description: Creates one or more keys for the corresponding client.
      parameters:
        - name: clientId
          in: path
          required: true
          description: ID of client that the added keys MUST belong to
          schema:
            type: string
            format: uuid
    get:
      tags:
        - client
      summary: Returns a set of keys by client ID.
      description: 'Given a client identifier it returns its corresponding set of keys, if any'
      operationId: getClientKeys
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: returns the corresponding array of keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientKeys'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/clients/{clientId}/keys/{keyId}':
    get:
      tags:
        - client
      summary: Returns a key by client and key identifier (kid).
      description: 'Given a client and key identifiers it returns the corresponding key, if any'
      operationId: getClientKeyById
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to lookup
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns the corresponding key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientKey'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - client
      summary: Deletes a key by client and key identifier (kid).
      description: 'Given a client and key identifiers it deletes the corresponding key, if any'
      operationId: deleteClientKeyById
      parameters:
        - name: clientId
          in: path
          description: ID of the client holding the key
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to delete
          required: true
          schema:
            type: string
      responses:
        "204":
          description: the corresponding key has been deleted.
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/clients/{clientId}/encoded/keys/{keyId}':
    get:
      tags:
        - client
      summary: Returns a base64 encoded key by client and key identifier (kid).
      description: 'Given a client and key identifiers it returns the corresponding encoded key, if any'
      operationId: getEncodedClientKeyById
      parameters:
        - name: clientId
          in: path
          description: ID of the client to look up
          required: true
          schema:
            type: string
            format: uuid
        - name: keyId
          in: path
          description: the unique identifier of the key (kid) to lookup
          required: true
          schema:
            type: string
      responses:
        "200":
          description: returns the corresponding base 64 encoded key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncodedClientKey'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/clients/{clientId}/operators/{operatorId}/keys':
    parameters:
      - name: clientId
        in: path
        description: ID of the client holding the key
        required: true
        schema:
          type: string
          format: uuid
      - name: operatorId
        in: path
        required: true
        description: ID of the Opeartor that the added keys MUST belong to
        schema:
          type: string
          format: uuid
    get:
      tags:
        - operator
      summary: Returns a set of keys by operator ID and client ID.
      description: 'Given an operator and a client it returns its corresponding set of keys, if any'
      operationId: getClientOperatorKeys
      responses:
        "200":
          description: returns the corresponding array of keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientKeys'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/operators/{operatorId}/keys':
    parameters:
      - name: operatorId
        in: path
        required: true
        description: ID of the Opeartor that the added keys MUST belong to
        schema:
          type: string
          format: uuid
    post:
      tags:
        - operator
      summary: Create Keys for the specific Operator.
      operationId: createOperatorKeys
      responses:
        "201":
          description: Keys created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientKeys'
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      requestBody:
        required: true
        description: an array of base64 encoded PEM keys.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatorKeysSeed'
      description: Creates one or more keys for the corresponding operator.
    get:
      tags:
        - operator
      summary: Returns a set of keys by operator ID.
      description: 'Given an operator ID it returns its corresponding set of keys, if any'
      operationId: getOperatorKeys
      responses:
        "200":
          description: returns the corresponding array of keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientKeys'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Client id not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/operators/{operatorId}/keys/{keyId}':
    parameters:
      - name: operatorId
        in: path
        description: Operator ID owning the key
        required: true
        schema:
          type: string
      - name: keyId
        in: path
        description: the unique identifier of the key (kid) to delete
        required: true
        schema:
          type: string
    get:
      tags:
        - operator
      summary: Returns a key by operator and key identifier (kid).
      description: 'Given an operator and key identifiers it returns the corresponding key, if any'
      operationId: getOperatorKeyById
      responses:
        "200":
          description: returns the corresponding key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientKey'
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - operator
      summary: Deletes a key by operator and key identifier (kid).
      description: 'Given an operator and key identifiers it deletes the corresponding key, if any'
      operationId: deleteOperatorKeyById
      responses:
        "204":
          description: the corresponding key has been deleted.
        "401":
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        "404":
          description: Key not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /.well-known/jwks.json:
    get:
      security: []
      tags:
        - well-known
      summary: Returns PDND public keys.
      description: 'Returns PDND public keys.'
      operationId: getWellKnownKeys
      responses:
        "200":
          description: PDND public keys in JWK format.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/KeysResponse'
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  schemas:
    AccessTokenRequest:
      type: object
      required:
        - client_assertion
        - client_assertion_type
        - grant_type
      properties:
        client_id:
          type: string
          format: uuid
          example: e58035ce-c753-4f72-b613-46f8a17b71cc
        client_assertion:
          type: string
          format: jws
        client_assertion_type:
          type: string
          example: urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer
        grant_type:
          type: string
          enum:
            - CLIENT_CREDENTIALS
    ClientCredentialsResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          format: jws
        token_type:
          $ref: '#/components/schemas/TokenType'
        expires_in:
          type: integer
          format: int64
          maximum: 600
    ClientSeed:
      description: Client creation request body
      type: object
      properties:
        eServiceId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        name:
          type: string
        purposes:
          type: string
        description:
          type: string
      required:
        - eServiceId
        - consumerId
        - name
        - purposes
    Client:
      description: Models Client details
      type: object
      properties:
        id:
          type: string
          format: uuid
        eservice:
          $ref: '#/components/schemas/EService'
        consumer:
          $ref: '#/components/schemas/Organization'
        agreement:
          $ref: '#/components/schemas/Agreement'
        name:
          type: string
        purposes:
          type: string
        description:
          type: string
        state:
          $ref: '#/components/schemas/ClientState'
        operators:
          $ref: '#/components/schemas/Operators'
          uniqueItems: true
      required:
        - id
        - eservice
        - organization
        - consumer
        - agreement
        - name
        - purposes
        - state
    EService:
      description: Models an E-Service
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        provider:
          $ref: '#/components/schemas/Organization'
        activeDescriptor:
          $ref: '#/components/schemas/Descriptor'
      required:
        - id
        - name
        - provider
    Descriptor:
      description: Models an E-Service Descriptor
      type: object
      properties:
        id:
          type: string
          format: uuid
        state:
          $ref: '#/components/schemas/EServiceDescriptorState'
        version:
          type: string
      required:
        - id
        - state
        - version
    Agreement:
      description: Models an Agreement
      type: object
      properties:
        id:
          type: string
          format: uuid
        state:
          $ref: '#/components/schemas/AgreementState'
        descriptor:
          $ref: '#/components/schemas/Descriptor'
      required:
        - id
        - state
        - descriptor
    ValidJWT:
      description: Models a JWT payload
      type: object
      properties:
        iss:
          type: string
        sub:
          type: string
        aud:
          type: array
          items:
            type: string
        exp:
          type: string
          format: date-time
        nbf:
          type: string
          format: date-time
        iat:
          type: string
          format: date-time
        jti:
          type: string
      additionalProperties: true
      required:
        - iss
        - sub
        - aud
        - exp
        - nbf
        - iat
        - jti
    Clients:
      type: object
      items:
        $ref: '#/components/schemas/Client'
    Operator:
      description: Models a Client Operator
      type: object
      properties:
        id:
          type: string
          format: uuid
        taxCode:
          type: string
        name:
          type: string
        surname:
          type: string
        role:
          $ref: '#/components/schemas/OperatorRole'
        product:
          $ref: '#/components/schemas/RelationshipProduct'
        state:
          $ref: '#/components/schemas/OperatorState'
      required:
        - id
        - taxCode
        - name
        - surname
        - email
        - role
        - product
        - state
    Operators:
      type: object
      items:
        $ref: '#/components/schemas/Operator'
    RelationshipProduct:
      type: object
      properties:
        id:
          type: string
        role:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - role
        - createdAt
    Key:
      description: 'Models a JWK'
      type: object
      properties:
        kty:
          type: string
        key_ops:
          type: array
          items:
            type: string
        use:
          type: string
        alg:
          type: string
        kid:
          type: string
        x5u:
          type: string
          minLength: 1
        x5t:
          type: string
        'x5t#S256':
          type: string
        x5c:
          type: array
          items:
            type: string
        crv:
          type: string
        x:
          type: string
        'y':
          type: string
        d:
          type: string
        k:
          type: string
        'n':
          type: string
        e:
          type: string
        p:
          type: string
        q:
          type: string
        dp:
          type: string
        dq:
          type: string
        qi:
          type: string
        oth:
          uniqueItems: false
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/OtherPrimeInfo'
      required:
        - kty
        - kid
    KeysResponse:
      description: 'JWKS'
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/Key'
      required:
        - keys
    OtherPrimeInfo:
      title: OtherPrimeInfo
      type: object
      properties:
        r:
          type: string
        d:
          type: string
        t:
          type: string
      required:
        - r
        - d
        - t
    ClientKey:
      type: object
      properties:
        key:
          $ref: '#/components/schemas/Key'
      required:
        - key
    EncodedClientKey:
      type: object
      properties:
        key:
          type: string
          description: 'base64 encoded key'
      required:
        - key
    ClientKeys:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/ClientKey'
      required:
        - keys
    KeysSeed:
      type: array
      items:
        $ref: '#/components/schemas/KeySeed'
    KeySeed:
      description: 'Models the seed for a public key to be persisted'
      type: object
      properties:
        operatorId:
          type: string
          format: uuid
          description: 'Represents the identifier of the platform security operator that is uploading the key'
        key:
          type: string
          description: 'Base64 UTF-8 encoding of a public key in PEM format'
        use:
          $ref: '#/components/schemas/KeyUse'
        alg:
          type: string
          description: 'The algorithm type of the key.'
      required:
        - operatorId
        - key
        - use
        - alg
    OperatorKeysSeed:
      type: array
      items:
        $ref: '#/components/schemas/OperatorKeySeed'
    OperatorKeySeed:
      description: 'Models the seed for a public key to be persisted'
      type: object
      properties:
        clientId:
          type: string
          description: 'Represents the identifier of the client related to the key'
        key:
          type: string
          description: 'Base64 UTF-8 encoding of a public key in PEM format'
        use:
          $ref: '#/components/schemas/KeyUse'
        alg:
          type: string
          description: 'The algorithm type of the key.'
      required:
        - clientId
        - key
        - use
        - alg
    KeyUse:
      type: string
      description: Represents the Use field of key
      enum:
        - SIG
        - ENC
    TokenType:
      type: string
      description: Represents the token type
      enum:
        - BEARER
        - POP
    ClientState:
      type: string
      description: Represents the Client state
      enum:
        - ACTIVE
        - SUSPENDED
    OperatorState:
      type: string
      description: Represents the Client Operator state
      enum:
        - ACTIVE
        - SUSPENDED
        - DELETED
    OperatorRole:
      type: string
      description: Represents the generic available role types for the relationship
      enum:
        - MANAGER
        - DELEGATE
        - OPERATOR
    EServiceDescriptorState:
      type: string
      description: EService Descriptor State Enum
      enum:
        - DRAFT
        - PUBLISHED
        - DEPRECATED
        - SUSPENDED
        - ARCHIVED
    AgreementState:
      type: string
      description: Agreement State
      enum:
        - ACTIVE
        - PENDING
        - SUSPENDED
        - INACTIVE
    Organization:
      description: Models an Organization
      type: object
      properties:
        institutionId:
          type: string
        description:
          type: string
      required:
        - institutionId
        - description
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: '^[ -~]{0,64}$'
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
        errors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ProblemError'
      additionalProperties: false
      required:
        - type
        - status
        - title
        - errors
    ProblemError:
      properties:
        code:
          description: Internal code of the error
          example: 123-4567
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{3}-[0-9]{4}$'
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Parameter not valid
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
      required:
        - code
        - detail
  securitySchemes:
    bearerAuth:
      type: http
      description: A bearer token in the format of a JWS and comformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).
      scheme: bearer
      bearerFormat: JWT

